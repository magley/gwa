#include "font.h"
#include "ctx/ctx.h"
#include "util/file/futil.h"
#include <cassert>

// TODO [tile_serialize.cpp] - Copy-pasting the same code.
using Declarr = std::vector<string2>;
using Declmap = std::unordered_map<string2, Declarr>;

static Declmap decl_map(const string2& s) {
    string2 ss = s.trim();
    assert(ss[0] == '{');
    assert(ss[-1] == '}');
    ss = ss.slice(1, -2).trim();

    const auto decls = ss.split_unless_between("\n", {"[]"}, false);
    Declmap map;
    for (const auto& decl : decls) {
        auto p = decl.trim().split_unless_between(" ", {"\"\"", "[]"}, false);
        map.insert({p[0], p});
    }

    return map;
}

//////////////////////////////////////////////////////////////////////////////

void Font::load(GwaCtx& ctx, const string2& serial) {
    Declmap map = decl_map(serial);

    string2 tex_fname = map.find("tex")->second[1];
    string2 data_fname = map.find("data")->second[1];
    tex = ctx.rm->texture(tex_fname);
    load_csv_data(from_file(data_fname.c_str()));
}

void Font::load_csv_data(const string2& csv_contents) {
    // As generated by codehead's bitmap font generator.
    const auto lines = csv_contents.split("\n", false);

    for (const string2& line : lines) {
        const auto parts = line.split(",");
        const string2 key = parts[0];
        const string2 val = parts[1];

        if (key == "Cell Height") {
            cell_size.y = val.to_i();
        } else if (key == "Cell Width") {
            cell_size.x = val.to_i();
        } else if (key.contains("Base Width")) {
            base_width.push_back(val.to_i());
        }
    }
}